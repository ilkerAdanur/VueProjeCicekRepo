// <auto-generated />
using System;
using FlowerShop.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlowerShop.API.Migrations
{
    [DbContext(typeof(FlowerShopContext))]
    [Migration("20250711160904_AddUserModel")]
    partial class AddUserModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("FlowerShop.API.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Çeşitli renklerde güller",
                            IsActive = true,
                            Name = "Gül"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bahar çiçekleri",
                            IsActive = true,
                            Name = "Lale"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Egzotik orkideler",
                            IsActive = true,
                            Name = "Orkide"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Hazır buketler",
                            IsActive = true,
                            Name = "Buket"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Saksıda çiçekler",
                            IsActive = true,
                            Name = "Saksı Çiçekleri"
                        });
                });

            modelBuilder.Entity("FlowerShop.API.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FlowerShop.API.Models.Flower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OccasionId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OccasionId");

                    b.ToTable("Flowers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "12 kırmızı gül ile hazırlanmış tutkulu buket",
                            ImageUrl = "/images/ask-i-memnu.jpg",
                            IsActive = true,
                            Name = "Aşk-ı Memnu",
                            OccasionId = 4,
                            Price = 185.00m,
                            Stock = 50,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pembe ve beyaz güller ile romantik buket",
                            ImageUrl = "/images/kalp-hirsizi.jpg",
                            IsActive = true,
                            Name = "Kalp Hırsızı",
                            OccasionId = 4,
                            Price = 165.00m,
                            Stock = 40,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Beyaz güller ve lilyumlarla gelin buketi",
                            ImageUrl = "/images/ebedi-mutluluk.jpg",
                            IsActive = true,
                            Name = "Ebedi Mutluluk",
                            OccasionId = 2,
                            Price = 285.00m,
                            Stock = 25,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Krem güller ve baby breath ile düğün buketi",
                            ImageUrl = "/images/sonsuz-ask.jpg",
                            IsActive = true,
                            Name = "Sonsuz Aşk",
                            OccasionId = 2,
                            Price = 245.00m,
                            Stock = 30,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Renkli gerbera ve güller ile neşeli buket",
                            ImageUrl = "/images/nese-patlamasi.jpg",
                            IsActive = true,
                            Name = "Neşe Patlaması",
                            OccasionId = 1,
                            Price = 125.00m,
                            Stock = 60,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sarı ve turuncu çiçeklerle enerjik buket",
                            ImageUrl = "/images/mutluluk-dansi.jpg",
                            IsActive = true,
                            Name = "Mutluluk Dansı",
                            OccasionId = 1,
                            Price = 135.00m,
                            Stock = 45,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pembe güller ve karanfiller ile özel buket",
                            ImageUrl = "/images/anne-sevgisi.jpg",
                            IsActive = true,
                            Name = "Anne Sevgisi",
                            OccasionId = 5,
                            Price = 155.00m,
                            Stock = 55,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Beyaz ve pembe çiçeklerle zarif buket",
                            ImageUrl = "/images/sefkat-eli.jpg",
                            IsActive = true,
                            Name = "Şefkat Eli",
                            OccasionId = 5,
                            Price = 145.00m,
                            Stock = 50,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Beyaz lilyum ve papatyalarla iyileşme buketi",
                            ImageUrl = "/images/sifa-dilegi.jpg",
                            IsActive = true,
                            Name = "Şifa Dileği",
                            OccasionId = 8,
                            Price = 95.00m,
                            Stock = 35,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sarı çiçeklerle moral verici buket",
                            ImageUrl = "/images/umut-isigi.jpg",
                            IsActive = true,
                            Name = "Umut Işığı",
                            OccasionId = 8,
                            Price = 105.00m,
                            Stock = 40,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Beyaz çiçeklerle saygı buketi",
                            ImageUrl = "/images/huzur-bahcesi.jpg",
                            IsActive = true,
                            Name = "Huzur Bahçesi",
                            OccasionId = 10,
                            Price = 175.00m,
                            Stock = 20,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Beyaz güller ve lilyumlarla taziye buketi",
                            ImageUrl = "/images/sessiz-dua.jpg",
                            IsActive = true,
                            Name = "Sessiz Dua",
                            OccasionId = 10,
                            Price = 195.00m,
                            Stock = 15,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Sarı güller ve orkidelerle tebrik buketi",
                            ImageUrl = "/images/basari-yolculugu.jpg",
                            IsActive = true,
                            Name = "Başarı Yolculuğu",
                            OccasionId = 7,
                            Price = 165.00m,
                            Stock = 30,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Turuncu ve kırmızı çiçeklerle motivasyon buketi",
                            ImageUrl = "/images/zirve-tirmanisi.jpg",
                            IsActive = true,
                            Name = "Zirve Tırmanışı",
                            OccasionId = 7,
                            Price = 155.00m,
                            Stock = 35,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pembe ve beyaz çiçeklerle bebek buketi",
                            ImageUrl = "/images/minik-melek.jpg",
                            IsActive = true,
                            Name = "Minik Melek",
                            OccasionId = 11,
                            Price = 125.00m,
                            Stock = 40,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pastel renkli çiçeklerle hoş geldin buketi",
                            ImageUrl = "/images/yeni-hayat.jpg",
                            IsActive = true,
                            Name = "Yeni Hayat",
                            OccasionId = 11,
                            Price = 135.00m,
                            Stock = 35,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Mavi ve beyaz çiçeklerle mezuniyet buketi",
                            ImageUrl = "/images/diploma-sevinci.jpg",
                            IsActive = true,
                            Name = "Diploma Sevinci",
                            OccasionId = 12,
                            Price = 145.00m,
                            Stock = 25,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Yeşil ve beyaz çiçeklerle akademik başarı buketi",
                            ImageUrl = "/images/bilgi-agaci.jpg",
                            IsActive = true,
                            Name = "Bilgi Ağacı",
                            OccasionId = 12,
                            Price = 155.00m,
                            Stock = 20,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Beyaz güller ve mavi çiçeklerle özür buketi",
                            ImageUrl = "/images/pismanlik-cicegi.jpg",
                            IsActive = true,
                            Name = "Pişmanlık Çiçeği",
                            OccasionId = 16,
                            Price = 115.00m,
                            Stock = 30,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Beyaz ve yeşil çiçeklerle barışma buketi",
                            ImageUrl = "/images/baris-dali.jpg",
                            IsActive = true,
                            Name = "Barış Dalı",
                            OccasionId = 16,
                            Price = 125.00m,
                            Stock = 25,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("FlowerShop.API.Models.Occasion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Occasions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Doğum günü kutlamaları için",
                            Icon = "bi-gift",
                            IsActive = true,
                            Name = "Doğum Günü"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Düğün törenleri için",
                            Icon = "bi-heart",
                            IsActive = true,
                            Name = "Düğün"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Yıldönümü kutlamaları için",
                            Icon = "bi-calendar-heart",
                            IsActive = true,
                            Name = "Yıldönümü"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "14 Şubat sevgililer günü için",
                            Icon = "bi-heart-fill",
                            IsActive = true,
                            Name = "Sevgililer Günü"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Anneler günü için",
                            Icon = "bi-flower1",
                            IsActive = true,
                            Name = "Anneler Günü"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Babalar günü için",
                            Icon = "bi-person-heart",
                            IsActive = true,
                            Name = "Babalar Günü"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Yeni işe başlama tebriği",
                            Icon = "bi-briefcase",
                            IsActive = true,
                            Name = "Yeni İş Tebriği"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Hastalık durumlarında",
                            Icon = "bi-heart-pulse",
                            IsActive = true,
                            Name = "Geçmiş Olsun"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Teşekkür etmek için",
                            Icon = "bi-hand-thumbs-up",
                            IsActive = true,
                            Name = "Teşekkür"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Taziye için",
                            Icon = "bi-flower2",
                            IsActive = true,
                            Name = "Başsağlığı"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bebek doğumu tebriği",
                            Icon = "bi-baby",
                            IsActive = true,
                            Name = "Yeni Bebek"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Mezuniyet kutlaması",
                            Icon = "bi-mortarboard",
                            IsActive = true,
                            Name = "Mezuniyet"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Terfi tebriği",
                            Icon = "bi-trophy",
                            IsActive = true,
                            Name = "Terfi"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Nişan töreni için",
                            Icon = "bi-gem",
                            IsActive = true,
                            Name = "Nişan"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Evlilik teklifi için",
                            Icon = "bi-ring",
                            IsActive = true,
                            Name = "Evlilik Teklifi"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Özür dilemek için",
                            Icon = "bi-emoji-frown",
                            IsActive = true,
                            Name = "Özür Dileme"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Başarılı karne için",
                            Icon = "bi-journal-check",
                            IsActive = true,
                            Name = "Karne Hediyesi"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Yeni eve taşınma",
                            Icon = "bi-house-heart",
                            IsActive = true,
                            Name = "Yeni Ev"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bayram kutlamaları",
                            Icon = "bi-star",
                            IsActive = true,
                            Name = "Bayram"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Genel kutlamalar",
                            Icon = "bi-balloon",
                            IsActive = true,
                            Name = "Kutlama"
                        });
                });

            modelBuilder.Entity("FlowerShop.API.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryCity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeliveryPostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FlowerShop.API.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FlowerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("FlowerId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FlowerShop.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@flowershop.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            PasswordHash = "jGl25bVBBBW96Qi9Te4V37Fnqchz/Eu4qB9vKrRIqRg=",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "demo@flowershop.com",
                            FirstName = "Demo",
                            IsActive = true,
                            LastName = "Customer",
                            PasswordHash = "XohImNooBHFR0OVvjcYpJ3NgPQ1qq73WKhHvch0VQtg=",
                            Role = "Customer",
                            Username = "demo"
                        });
                });

            modelBuilder.Entity("FlowerShop.API.Models.Flower", b =>
                {
                    b.HasOne("FlowerShop.API.Models.Category", "Category")
                        .WithMany("Flowers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowerShop.API.Models.Occasion", "Occasion")
                        .WithMany("Flowers")
                        .HasForeignKey("OccasionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("Occasion");
                });

            modelBuilder.Entity("FlowerShop.API.Models.Order", b =>
                {
                    b.HasOne("FlowerShop.API.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowerShop.API.Models.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FlowerShop.API.Models.OrderItem", b =>
                {
                    b.HasOne("FlowerShop.API.Models.Flower", "Flower")
                        .WithMany("OrderItems")
                        .HasForeignKey("FlowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlowerShop.API.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flower");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FlowerShop.API.Models.Category", b =>
                {
                    b.Navigation("Flowers");
                });

            modelBuilder.Entity("FlowerShop.API.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FlowerShop.API.Models.Flower", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FlowerShop.API.Models.Occasion", b =>
                {
                    b.Navigation("Flowers");
                });

            modelBuilder.Entity("FlowerShop.API.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FlowerShop.API.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
